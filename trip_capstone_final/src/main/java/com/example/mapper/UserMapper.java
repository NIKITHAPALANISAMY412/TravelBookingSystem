package com.example.mapper;

import com.example.dto.UserRequestDTO;
import com.example.dto.UserResponseDTO;
import com.example.entity.RoleEntity;
import com.example.entity.UserEntity;
import org.mapstruct.Mapper;
import org.mapstruct.Mapping;

import java.util.Set;
import java.util.stream.Collectors;

@Mapper(componentModel = "spring")
public interface UserMapper {

    // Request DTO → Entity
    @Mapping(target = "roles", ignore = true) // handled separately in service
    @Mapping(target = "id", ignore = true) // generated by DB
    @Mapping(target = "createdAt", ignore = true)
    @Mapping(target = "updatedAt", ignore = true)
    UserEntity toEntity(UserRequestDTO dto);

    // Entity → Response DTO
    @Mapping(source = "id", target = "userId")
    @Mapping(target = "roles", expression = "java(mapRoles(entity.getRoles()))")
    UserResponseDTO toResponseDTO(UserEntity entity);

    // Convert RoleEntity -> String
    default Set<String> mapRoles(Set<RoleEntity> roles) {
        if (roles == null) return null;
        return roles.stream()
                .map(RoleEntity::getRoleName)
                .collect(Collectors.toSet());
    }
}








// package com.example.mapper;

// import com.example.dto.UserRequestDTO;
// import com.example.dto.UserResponseDTO;
// import com.example.entity.RoleEntity;
// import com.example.entity.UserEntity;

// import java.util.Set;
// import java.util.stream.Collectors;

// import org.mapstruct.Mapper;
// import org.mapstruct.Mapping;


// @Mapper(componentModel = "spring")
// public interface UserMapper {

//     // Request DTO → Entity
//     @Mapping(target = "roles", ignore = true) // handled separately in service
//     @Mapping(target = "id", ignore = true) // generated by DB
//     @Mapping(target = "createdAt", ignore = true)
//     @Mapping(target = "updatedAt", ignore = true)
//     UserEntity toEntity(UserRequestDTO dto);

//     // Entity → Response DTO
//     @Mapping(source = "id", target = "userId")
//     @Mapping(source = "roles", target = "roles")
//     UserResponseDTO toResponseDTO(UserEntity entity);

//     default Set<String> mapRoles(Set<RoleEntity> roles) {
//         if (roles == null) return null;
//         return roles.stream()
//                     .map(RoleEntity::getRoleName)
//                     .collect(Collectors.toSet());
//     }
// }

